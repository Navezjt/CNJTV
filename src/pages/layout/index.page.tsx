import type { NextPage } from "next";
import Head from "next/head";
import { clone } from "ramda";
import { useEffect } from "react";
import { createLocalStorageStateHook } from "use-local-storage-state";
import { Monitor } from "../../components/Monitor/Monitor";
import { MainLayout } from "../../layout/MainLayout";
import { useSavedGrid } from "../grid/index.page";
import { initialLayout } from "./initialLayout";
import { Col, Layout, Row, SourceNode } from "./types";

function Col({
  col,
  onSourceChange,
}: {
  col: Col;
  onSourceChange: (node: SourceNode) => void;
}) {
  const { rows, node } = col;
  const size = col.size || 12;

  if (node?.sourceSlug) {
    return (
      <Monitor
        size={size}
        sourceSlug={node?.sourceSlug}
        // onChangeClick={(source) =>
        //   onSourceChange({ ...node, sourceSlug: source.slug })
        // }
      />
    );
  }

  return (
    <div className={`col-${size}`}>
      {rows?.map((row, i) => (
        <Row key={i} row={row} onSourceChange={onSourceChange} />
      ))}
    </div>
  );
}

function Row({
  row,
  onSourceChange,
}: {
  row: Row;
  onSourceChange: (node: SourceNode) => void;
}) {
  const { cols } = row;
  return (
    <div className="row no-gutters">
      {cols?.map((col, i) => (
        <Col col={col} key={i} onSourceChange={onSourceChange} />
      ))}
    </div>
  );
}

export const useSavedLayout = createLocalStorageStateHook<Layout | undefined>(
  "__tele_layout__"
);

const LayoutPage: NextPage = () => {
  const [selectedSources, setSelectedSources] = useSavedGrid();
  const [layout, setLayout] = useSavedLayout();
  useEffect(() => {
    if (!layout) setLayout(initialLayout);
  });
  const handleSelectSource = (node: SourceNode) => {
    setLayout((l) => {
      const layoutClone = clone(l);
      if (!layoutClone) return layoutClone;

      const findInRow = (row: Row) => {
        if (row.cols) {
          for (const col of row.cols) {
            findInCol(col);
          }
        }
      };
      const findInCol = (col: Col) => {
        if (col.node?.uuid === node.uuid) {
          col.node = node;
          return;
        }
        if (col.rows) {
          for (const row of col.rows) {
            findInRow(row);
          }
        }
      };
      findInCol(layoutClone);
      return layoutClone;
    });
  };

  return (
    <MainLayout>
      <Head>
        <title>Tele - Layout</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {layout && <Col col={layout} onSourceChange={handleSelectSource} />}
    </MainLayout>
  );
};

export default LayoutPage;
